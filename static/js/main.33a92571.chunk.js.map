{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["CVData","personalData","name","title","image","contacts","type","value","sections","content","icon","items","authority","authorityWebSite","rightSide","description","company","companyWebSite","companyMeta","datesBetween","descriptionTags","groups","sectionHeader","projectUrl","authorityMeta","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPACaA,EAAS,CAClBC,aAAc,CACZC,KAAM,eACNC,MAAO,4BACPC,MAAO,mDACPC,SAAU,CACR,CAAEC,KAAM,QAASC,MAAO,uBACxB,CAAED,KAAM,QAASC,MAAO,uBACxB,CAAED,KAAM,UAAWC,MAAO,+BAC1B,CAAED,KAAM,WAAYC,MAAO,kCAC3B,CAAED,KAAM,UAAWC,MAAO,+BAC1B,CAAED,KAAM,SAAUC,MAAO,0BAG7BC,SAAU,CACR,CACEF,KAAM,OACNH,MAAO,iBACPM,QAAS,ivBACTC,KAAM,WAER,CACEJ,KAAM,cACNH,MAAO,YACPO,KAAM,aACNC,MAAO,CACL,CACER,MAAO,4BACPS,UAAW,aACXC,iBAAkB,qBAClBC,UAAW,eAEb,CACEX,MAAO,wBACPS,UAAW,qBACXC,iBAAkB,qBAClBC,UAAW,oBAIjB,CACER,KAAM,mBACNH,MAAO,cACPY,YAAa,WACbL,KAAM,UACNC,MAAO,CACL,CACER,MAAO,0BACPa,QAAS,2BACTD,YAAa,0CACbE,eAAgB,gCAChBC,YAAa,GACbC,aAAc,oBACdC,gBAAiB,CAAC,aAAc,UAElC,CACEjB,MAAO,qBACPa,QAAS,2BACTD,YAAa,yDACbE,eAAgB,gCAChBC,YAAa,4BACbC,aAAc,oBAEhB,CACEhB,MAAO,SACPa,QAAS,4BACTD,YAAa,oBACbE,eAAgB,gCAChBC,YAAa,SACbC,aAAc,uBAIpB,CACEb,KAAM,gBACNH,MAAO,WACPY,YAAa,WACbL,KAAM,QACNW,OAAQ,CACN,CACEC,cAAe,eACfP,YAAa,WACbJ,MAAO,CACL,CAAER,MAAO,UAAWoB,WAAY,WAAYR,YAAa,YACzD,CAAEZ,MAAO,UAAWoB,WAAY,WAAYR,YAAa,YACzD,CAAEZ,MAAO,UAAWoB,WAAY,WAAYR,YAAa,gBAKjE,CACET,KAAM,cACNH,MAAO,6BACPY,YAAa,GACbL,KAAM,WACNC,MAAO,CACL,CACER,MAAO,0BACPS,UAAW,WACXC,iBAAkB,iCAEpB,CACEV,MAAO,0BACPS,UAAW,WACXY,cAAe,UACfX,iBAAkB,gCAClBC,UAAW,QAEb,CACEX,MAAO,0BACPqB,cAAe,aAIrB,CACElB,KAAM,cACNH,MAAO,YACPO,KAAM,WACNC,MAAO,CACL,CACEC,UAAW,UACXY,cAAe,gBAEjB,CACEZ,UAAW,UACXY,cAAe,cAIrB,CACElB,KAAM,WACNH,MAAO,qBACPO,KAAM,SACNC,MAAO,CAAC,QAAS,aAAc,MAAO,MAAO,WAAY,aAE3D,CACEL,KAAM,WACNH,MAAO,qBACPO,KAAM,QACNC,MAAO,CAAC,cAAe,aC7HhBc,E,iLARX,OACE,6BACE,kBAAC,IAAOzB,Q,GAJE0B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.33a92571.chunk.js","sourcesContent":["\nexport const CVData = {\n    personalData: {\n      name: 'Ganesh Hegde',\n      title: 'Senior Software Developer',\n      image: 'https://bulma.io/images/placeholders/128x128.png',\n      contacts: [\n        { type: 'email', value: 'nshganesh@gmail.com' },\n        { type: 'phone', value: '+91 (876) 220 11 02' },\n        { type: 'website', value: 'nshganesh.github.io/resume/' },\n        { type: 'linkedin', value: 'linkedin.com/in/ganesh28hegde/' },\n        { type: 'twitter', value: 'twitter.com/the_ganeshhegde' },\n        { type: 'github', value: 'github.com/nshganesh' }\n      ]\n    },\n    sections: [\n      {\n        type: 'text',\n        title: 'Career Profile',\n        content: 'When I was child, I always want to be a developer. I think I am now. Culpa proident ad officia minim Lorem sint excepteur irure culpa nisi aliquip nostrud.Laborum voluptate nostrud fugiat occaecat proident veniam excepteur pariatur amet ex sit.Anim aliquip do in commodo adipisicing.Nulla adipisicing nisi enim ullamco sunt veniam.Ullamco labore sunt Lorem veniam id et Lorem magna eiusmod aute. Aliquip minim est consectetur anim mollit aliqua ex elit do et nulla do. Cupidatat ad sunt cillum sint consectetur sunt cillum eiusmod ad esse aliqua. Aute anim elit amet in duis aute ipsum deserunt qui deserunt officia excepteur veniam. Et laboris nostrud est ipsum nulla fugiat deserunt magna velit irure. Ullamco duis ut magna ea tempor enim in ipsum.',\n        icon: 'usertie'\n      },\n      {\n        type: 'common-list',\n        title: 'Education',\n        icon: 'graduation',\n        items: [\n          {\n            title: 'Computer Engineering (BS)',\n            authority: 'University',\n            authorityWebSite: 'https://sample.edu',\n            rightSide: '2013 - 2017'\n          },\n          {\n            title: 'Some Department (PHD)',\n            authority: 'Another University',\n            authorityWebSite: 'https://sample.edu',\n            rightSide: '2017 - Present'\n          }\n        ]\n      },\n      {\n        type: 'experiences-list',\n        title: 'Experiences',\n        description: 'Optional',\n        icon: 'archive',\n        items: [\n          {\n            title: 'Lead Software Developer',\n            company: 'Some Company Example INC',\n            description: 'I\\'m working as a lead developer yeeeey!',\n            companyWebSite: 'http://somecompanyexample.com',\n            companyMeta: '',\n            datesBetween: '2017.10 - Present',\n            descriptionTags: ['Javascript', 'React']\n          },\n          {\n            title: 'Software Developer',\n            company: 'Some Company Example INC',\n            description: 'I\\'m using ReactJS and working as a front-end developer',\n            companyWebSite: 'http://somecompanyexample.com',\n            companyMeta: 'Little info about company',\n            datesBetween: '2016.8 - 2017.10'\n          },\n          {\n            title: 'Intern',\n            company: 'Some Software Example INC',\n            description: 'I was warming up.',\n            companyWebSite: 'http://someexamplecompany.com',\n            companyMeta: 'SF USA',\n            datesBetween: '2012.06 - 2012.10'\n          }\n        ]\n      },\n      {\n        type: 'projects-list',\n        title: 'Projects',\n        description: 'Optional',\n        icon: 'tasks',\n        groups: [\n          {\n            sectionHeader: 'Company Name',\n            description: 'Optional',\n            items: [\n              { title: 'Project', projectUrl: 'optional', description: 'Optional' },\n              { title: 'Project', projectUrl: 'optional', description: 'Optional' },\n              { title: 'Project', projectUrl: 'optional', description: 'Optional' }\n            ]\n          }\n        ]\n      },\n      {\n        type: 'common-list',\n        title: 'Conferences & Certificates',\n        description: '',\n        icon: 'comments',\n        items: [\n          {\n            title: 'Some Conferences / 2019',\n            authority: 'SomeConf',\n            authorityWebSite: 'https://www.someconf.somesome'\n          },\n          {\n            title: 'Some Conferences / 2019',\n            authority: 'SomeConf',\n            authorityMeta: 'Speaker',\n            authorityWebSite: 'https://www.someconf.somesome',\n            rightSide: 'test'\n          },\n          {\n            title: 'Some Conferences / 2012',\n            authorityMeta: 'Speaker'\n          }\n        ]\n      },\n      {\n        type: 'common-list',\n        title: 'Languages',\n        icon: 'language',\n        items: [\n          {\n            authority: 'English',\n            authorityMeta: 'Professional'\n          },\n          {\n            authority: 'Spanish',\n            authorityMeta: 'Beginner'\n          }\n        ]\n      },\n      {\n        type: 'tag-list',\n        title: 'Skills Proficiency',\n        icon: 'rocket',\n        items: ['React', 'Javascript', 'CSS', 'SQL', 'SomeTech', 'CoolTech']\n      },\n      {\n        type: 'tag-list',\n        title: 'Hobies & Interests',\n        icon: 'cubes',\n        items: ['Photography', 'Poetry']\n      }\n    ]\n  }\n  ","import React from 'react';\n\nimport CV from 'react-cv'\nimport { CVData } from './data';\n\nclass App extends React.Component {\n  render () {\n    return (\n      <div>\n        <CV {...CVData} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}